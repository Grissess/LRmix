/**
 * Copyright (C) 2013,2014 Netherlands Forensic Institute
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package nl.minvenj.nfi.lrmixstudio.gui.tabs.reports;

import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.ImageIcon;
import javax.swing.UIDefaults;

import nl.minvenj.nfi.lrmixstudio.model.AnalysisReport;

/**
 *
 * @author dejong
 */
public class ReportDetailPanel extends javax.swing.JPanel {

    private final AnalysisReport _report;
    private boolean _selected;

    public ReportDetailPanel(AnalysisReport report) {
        this(report, true);
    }

    public ReportDetailPanel(AnalysisReport report, boolean fullMode) {
        initComponents();
        _report = report;
        _selected = true;
        _prosecutionSummary.setText(report.getProsecutionHypothesis().toString());
        _defenseSummary.setText(report.getDefenseHypothesis().toString());
        _timestamp.setText(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(new Date(report.getStartTime())) + ". Calculation time: " + toTimeString(report.getProcessingTime()));
        _alreadyExportedLabel.setVisible(fullMode && report.isExported());
        _locusList.setText(report.getEnabledLoci().toString().replaceAll("\\[", "").replaceAll("\\]", ""));
        _replicateList.setText(report.getReplicates().toString().replaceAll("\\[", "").replaceAll("\\]", ""));
        // TODO add performance analysis graph to report
        if (report.getNonContributorTestResults() != null && report.getNonContributorTestResults().getPreview() != null) {
            _noncontributorTestGraph.setIcon(new ImageIcon(report.getNonContributorTestResults().getPreview().getScaledInstance(150, 100, Image.SCALE_SMOOTH)));
        } else {
            _noncontributorTestGraph.setIcon(null);
            _noncontributorTestGraph.setVisible(false);
        }
        if (report.getSensitivityAnalysisResults().getRanges().isEmpty()) {
            _sensitivitySummary.setText("Not Performed");
            _sensitivityGraph.setIcon(null);
            _sensitivityGraph.setVisible(false);
        } else {
            _sensitivitySummary.setText(report.getSensitivityAnalysisResults().toString());
            try {
                _sensitivityGraph.setIcon(new ImageIcon(report.getSensitivityAnalysisResults().getPreview().getScaledInstance(150, 100, Image.SCALE_SMOOTH)));
                _sensitivityGraph.setVisible(fullMode);
            } catch (Exception e) {
                _sensitivityGraph.setIcon(null);
                _sensitivityGraph.setVisible(false);
            }
        }
        if (report.getLikelihoodRatio() != null) {
            _likelihoodRatioSummary.setText("" + report.getLikelihoodRatio().getOverallRatio());
        } else {
            _likelihoodRatioSummary.setText("Analysis not completed");
        }

        _sensitivityLabel.setVisible(fullMode);
        _sensitivitySummary.setVisible(fullMode);
        _populationStatistics.setText(report.getPopulationStatistics().getFileName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _prosecutionLabel = new javax.swing.JLabel();
        _defenseLabel = new javax.swing.JLabel();
        _sensitivityLabel = new javax.swing.JLabel();
        _prosecutionSummary = new javax.swing.JTextField();
        _defenseSummary = new javax.swing.JTextField();
        _sensitivitySummary = new javax.swing.JTextField();
        _lrLabel = new javax.swing.JLabel();
        _likelihoodRatioSummary = new javax.swing.JTextField();
        _sensitivityGraph = new javax.swing.JLabel();
        _dateTimeLabel = new javax.swing.JLabel();
        _timestamp = new javax.swing.JTextField();
        _noncontributorTestGraph = new javax.swing.JLabel();
        _alreadyExportedLabel = new javax.swing.JLabel();
        _lociLabel = new javax.swing.JLabel();
        _locusList = new javax.swing.JTextField();
        _replicatesLabel = new javax.swing.JLabel();
        _replicateList = new javax.swing.JTextField();
        _populationSatisticsLabel = new javax.swing.JLabel();
        _populationStatistics = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        setPreferredSize(new java.awt.Dimension(700, 199));

        _prosecutionLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        _prosecutionLabel.setText("Prosecution:");

        _defenseLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        _defenseLabel.setText("Defense:");

        _sensitivityLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        _sensitivityLabel.setText("Sensitivity:");

        _prosecutionSummary.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        _defenseSummary.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        _sensitivitySummary.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        _lrLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        _lrLabel.setText("LR:");

        _likelihoodRatioSummary.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        _dateTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        _dateTimeLabel.setText("Date and time:");

        _timestamp.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        _alreadyExportedLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        _alreadyExportedLabel.setText("Exported");

        _lociLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        _lociLabel.setText("Loci:");

        _locusList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        _replicatesLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        _replicatesLabel.setText("Replicates:");

        _replicateList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        _populationSatisticsLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        _populationSatisticsLabel.setText("Statistics:");

        _populationStatistics.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_dateTimeLabel)
                    .addComponent(_sensitivityLabel)
                    .addComponent(_lrLabel)
                    .addComponent(_defenseLabel)
                    .addComponent(_prosecutionLabel)
                    .addComponent(_replicatesLabel)
                    .addComponent(_lociLabel)
                    .addComponent(_populationSatisticsLabel))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_timestamp)
                    .addComponent(_prosecutionSummary)
                    .addComponent(_defenseSummary)
                    .addComponent(_replicateList)
                    .addComponent(_locusList)
                    .addComponent(_sensitivitySummary)
                    .addComponent(_likelihoodRatioSummary)
                    .addComponent(_populationStatistics))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_noncontributorTestGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_sensitivityGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(_alreadyExportedLabel)
                .addContainerGap(605, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(_alreadyExportedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(_sensitivityGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                        .addComponent(_noncontributorTestGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_dateTimeLabel)
                            .addComponent(_timestamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_prosecutionLabel)
                            .addComponent(_prosecutionSummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_defenseLabel)
                            .addComponent(_defenseSummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_populationSatisticsLabel)
                            .addComponent(_populationStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_replicatesLabel)
                            .addComponent(_replicateList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_lociLabel)
                            .addComponent(_locusList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_sensitivityLabel)
                            .addComponent(_sensitivitySummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_likelihoodRatioSummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_lrLabel))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel _alreadyExportedLabel;
    private javax.swing.JLabel _dateTimeLabel;
    private javax.swing.JLabel _defenseLabel;
    private javax.swing.JTextField _defenseSummary;
    private javax.swing.JTextField _likelihoodRatioSummary;
    private javax.swing.JLabel _lociLabel;
    private javax.swing.JTextField _locusList;
    private javax.swing.JLabel _lrLabel;
    private javax.swing.JLabel _noncontributorTestGraph;
    private javax.swing.JLabel _populationSatisticsLabel;
    private javax.swing.JTextField _populationStatistics;
    private javax.swing.JLabel _prosecutionLabel;
    private javax.swing.JTextField _prosecutionSummary;
    private javax.swing.JTextField _replicateList;
    private javax.swing.JLabel _replicatesLabel;
    private javax.swing.JLabel _sensitivityGraph;
    private javax.swing.JLabel _sensitivityLabel;
    private javax.swing.JTextField _sensitivitySummary;
    private javax.swing.JTextField _timestamp;
    // End of variables declaration//GEN-END:variables

    public boolean isSelected() {
        return _selected;
    }

    public AnalysisReport getReport() {
        return _report;
    }

    public void setSelected(boolean selected) {
        this._selected = selected;

        UIDefaults defaults = javax.swing.UIManager.getDefaults();
        setBackground(selected ? defaults.getColor("List.selectionBackground") : Color.WHITE);

        for (Component child : getComponents()) {
            child.setBackground(selected ? defaults.getColor("List.selectionBackground") : Color.WHITE);
        }
    }

    private String toTimeString(long processingTime) {
        String time = "";
        int seconds = (int) (processingTime / 1000) % 60;
        int minutes = (int) (processingTime / 60000) % 60;
        int hours = (int) (processingTime / 3600000);
        if (hours > 0) {
            time += hours + " hour" + (hours > 1 ? "s" : "");
        }
        if (minutes > 0) {
            if (hours > 0 && seconds == 0) {
                time += " and ";
            }
            time += minutes + " minute" + (minutes > 1 ? "s" : "");
        }
        if (seconds > 0) {
            if (hours > 0 || minutes > 0) {
                time += " and ";
            }
            time += seconds + " second" + (seconds > 1 ? "s " : "");
        }

        if (time.isEmpty()) {
            time = "less than 1 second";
        }
        return time;
    }
}
