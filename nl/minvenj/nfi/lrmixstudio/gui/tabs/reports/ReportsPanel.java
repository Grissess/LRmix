/**
 * Copyright (C) 2013, 2014 Netherlands Forensic Institute
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package nl.minvenj.nfi.lrmixstudio.gui.tabs.reports;

import java.awt.Component;
import java.awt.Frame;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import nl.minvenj.nfi.lrmixstudio.gui.ApplicationSettings;
import nl.minvenj.nfi.lrmixstudio.gui.ApplicationStateChangeListener;
import nl.minvenj.nfi.lrmixstudio.gui.SessionData;
import nl.minvenj.nfi.lrmixstudio.model.AnalysisReport;
import nl.minvenj.nfi.lrmixstudio.model.AnalysisReportImpl;
import nl.minvenj.nfi.lrmixstudio.model.ConfigurationDataChangeListener;
import nl.minvenj.nfi.lrmixstudio.model.ConfigurationDataElement;
import nl.minvenj.nfi.lrmixstudio.report.jasper.ReportGenerator;

/**
 *
 * @author dejong
 */
public class ReportsPanel extends javax.swing.JPanel implements ApplicationStateChangeListener, ConfigurationDataChangeListener {

    private static final Logger LOG = LoggerFactory.getLogger(ReportsPanel.class);
    private SessionData session;
    private boolean _exportSucceeded;

    /**
     * Creates new form ReportsPanel
     */
    public ReportsPanel() {
        initComponents();
        reportList.setModel(new ReportListModel(null, true));
        reportList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        reportList.setCellRenderer(new ListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                ReportDetailPanel panel = (ReportDetailPanel) value;
                panel.setSelected(isSelected);
                return panel;
            }
        });
        reportList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                exportButton.setEnabled(!reportList.getSelectedValuesList().isEmpty());
            }
        });
    }

    public void setContext(SessionData session) {
        this.session = session;
        session.addStateChangeListener(this);
        session.addDataChangeListener(this);
        reportList.setModel(new ReportListModel(session.getReports(), true));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        reportList = new javax.swing.JList();
        exportButton = new javax.swing.JButton();

        jScrollPane1.setViewportView(reportList);

        exportButton.setText("Export...");
        exportButton.setEnabled(false);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exportButton)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        Component rootFrame = this;
        while (rootFrame != null && !(rootFrame instanceof JFrame)) {
            rootFrame = rootFrame.getParent();
        }
        ReportGenerator repgen = new ReportGenerator();
        File reportsSubdir = new File(ApplicationSettings.getCaseFilesPath() + File.separatorChar + "reports");
        if (!reportsSubdir.exists()) {
            reportsSubdir.mkdir();
        }
        String fileName = ApplicationSettings.getCaseFilesPath() + File.separatorChar + "reports" + File.separatorChar + "LRmixStudio-" + session.getCaseNumber() + "-" + new SimpleDateFormat("yyyy-MM-dd-HHmmss").format(new Date().getTime()) + ".pdf";
        // Get reporting office's remarks
        Collection<AnalysisReport> selectedReports = getSelectedReports();
        ExportSettingsDialog dlg = new ExportSettingsDialog((Frame) rootFrame, selectedReports, true);
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);
        if (dlg.isOk()) {
            _exportSucceeded = true;
            repgen.generate((JFrame) rootFrame, session, selectedReports, dlg.getRemarks(), fileName);
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private Collection<AnalysisReport> getSelectedReports() {
        ArrayList<AnalysisReport> selectedReports = new ArrayList<>();
        for (ReportDetailPanel reportPanel : ((ReportListModel) reportList.getModel()).getReportPanels()) {
            if (reportPanel.isSelected()) {
                selectedReports.add(reportPanel.getReport());
            }
        }
        return selectedReports;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList reportList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void applicationStateChanged(APP_STATE newState) {
        switch (newState) {
            case EXPORT_RUNNING:
                exportButton.setEnabled(false);
                reportList.setEnabled(false);
                setEnabled(false);
                break;
            case READY_FOR_ANALYSIS:
                if (!reportList.isEnabled() && _exportSucceeded) {
                    for (ReportDetailPanel reportPanel : ((ReportListModel) reportList.getModel()).getReportPanels()) {
                        if (reportPanel.isSelected()) {
                            ((AnalysisReportImpl) reportPanel.getReport()).setExported(true);
                        }
                    }
                }
                Collection<AnalysisReport> reports = session.getReports();
                reportList.setModel(new ReportListModel(reports, true));
                reportList.setEnabled(true);
                exportButton.setEnabled(!reportList.getSelectedValuesList().isEmpty());
                setEnabled(reportList.getModel().getSize() > 0);
                break;
            default:
                setEnabled(false);
                break;
        }
    }

    @Override
    public void dataChanged(ConfigurationDataElement element) {
        switch (element) {
            case ERROR_MESSAGE:
                _exportSucceeded = false;
                break;
            case SENSITIVITYANALYSISRESULTS:
                Collection<AnalysisReport> reports = session.getReports();
                reportList.setModel(new ReportListModel(reports, true));
                setEnabled(reportList.getModel().getSize() > 0);
                break;
        }
    }
}
